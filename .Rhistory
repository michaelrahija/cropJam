fao_world2 <- arrange(fao_world2,order)
master.t$country  <- gsub("^ +","", master.t$country)
##---CREATE DF FOR DONORS BY COUNTRY AND MERGE
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(df = master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
#Final count donors by country
master.c <- master.c %>%
group_by(country) %>%
summarize(donors = length(unique(donors)))
#merge with centroid data frame
master <- merge(master, master.c, all = TRUE)
source("R/implementerMap.R")
fao <- implementerMap(df = data,
implementing.institution = "FAO")
fao
flowMap(data = data, include.donors = TRUE)
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE)
#create estimated flow map
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE)
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
#create estimated flow map
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE)
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
#create estimated flow map
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE)
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
#create estimated flow map
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE)
source("R/flowMap.R")
flowMap(data = data, include.donors = FALSE)
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE)
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE,fixed.range = c(1,9))
flowMap(data = data, include.donors = TRUE,fixed.range = c(1,5))
flowMap(data = data, include.donors = TRUE,fixed.range = c(1,9))
#create maps by implementer - FAO
source("R/implementerMap.R")
fao <- implementerMap(df = data,
implementing.institution = "FAO")
fao
wb <- implementerMap(df = data,
implementing.institution = "WB")
wb
usda <- implementerMap(df = data,
implementing.institution = "USDA")
usda
head(data)
data$implementer %in% c("FAO","WB","USDA")
data.test <- data[data$implementer %in% c("FAO","WB","USDA"),]
data.test
head(data.test)
unique(data.test$implementer)
map <- flowMap(data = data.test, include.donors = FALSE)
map + facet_grid(~implementer)
map + facet_grid(.~implementer)
colnames(data.test)
map + facet_grid(. ~ implementer)
map + facet_grid(implementer ~ .)
map + facet_grid(implementer ~ ., scales = "free")
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE,fixed.range = c(1,9))
source("R/flowMap.R")
flowMap(data = data, include.donors = TRUE,fixed.range = c(1,9))
head(data)
donors <- select(data, donor, country, budget)
head(donors)
sepDonors(df = donors, donor.names.only = FALSE)
head(donors)
head(df)
df <- select(data, donor, country, budget)
head(df)
sepDonors(df = donors, donor.names.only = FALSE)
sepDonors(df = donors, donor.names.only = FALSE)
sdfas
head(Df)
head(Df)
head(df)
names(df) <- c("donors","country","budget")
sepDonors(df = donors, donor.names.only = FALSE)
head(Df)
head(Df)
head(df)
df <- select(data, donor, country, budget)
head(df)
seperate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
library(tidyr)
seperate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
separate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
test <- separate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
head(test)
test2 <- gather(test,country, na.rm = TRUE)
head(test2)
test2 <- gather(test,country,budget, na.rm = TRUE)
head(test2)
ar.test <- arrange(test2,country)
df <- select(data, donor, country, budget,agId)
head(df)
test <- separate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
head(test)
test2 <- gather(test,country,budget,aId na.rm = TRUE)
test2 <- gather(test,country,budget,aId, na.rm = TRUE)
test2 <- gather(test,country,budget,agId, na.rm = TRUE)
head(test2)
head(test)
?gather
test2 <- gather(test, key = agId)
head(test2)
test2 <- gather(test, key = agId, value = budget)
head(test2)
test2 <- gather(test, key = agId, countries,value = budget)
test2 <- gather(test, key = agId, country,value = budget)
head(test2)
df <- select(data, donor, country, budget,agId)
head(df)
library(tidyr)
test <- separate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
head(test)
x <- test %>%
gather(key, donor,-country,-budget, - agId)
head(x)
x.arr <- arrange(x,agId)
head(x.arr)
x.arr <- arrange(x,agId)
head(x.arr)
test <- separate(df, donor,
into = c("Donor1","Donor2","Donor3"),
sep = ",",
extra = 'drop')
x <- test %>%
gather(key, donor,-country,-budget, - agId)
x <- filter(x, !is.na(donor))
head(x)
x.arr <- arrange(x,agId)
x.arr
head(x.arr)
head(x.arr, n = 10)
head(x.arr, n = 20)
head(x.arr, n = 14)
head(x.arr, n = 15)
head(test)
tail(test)
#need to figure out way to keep scale for bubble sizes
#dataset = donors, use "," for seperating, not ";"
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
unique(data$donor)
paste0("Donor",1:1-)
paste0("Donor",1:10)
donor.cols <- paste0("Donor",1:10)
test <- separate(df, donor,
into = donor.cols,
sep = ",",
extra = 'drop')
head(test)
tail(test)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
df <- select(data, donor, country, budget,agId)
donor.cols <- paste0("Donor",1:10)
test <- separate(df, donor,
into = donor.cols,
sep = ",",
extra = 'drop')
head(test)
tail(testx <- test %>%
head(test)
tail(test)
donor.cols <- paste0("Donor",1:11)
test <- separate(df, donor,
into = donor.cols,
sep = ",",
extra = 'drop')
tail(test)
x <- test %>%
gather(key, donor,-country,-budget, - agId)
head(x)
tail(x)
unique(x$donor)
x <- filter(x, !is.na(donor))
unique(x$donor)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
source("R/implementerMap.R")
fao <- implementerMap(df = data,
implementing.institution = "FAO")
source("R/implementerMap.R")
fao <- implementerMap(df = data,
implementing.institution = "FAO")
fao
eu <- implementerMap(df = data,
implementing.institution = "EU")
eu
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
df <- select(data, donor, country, budget,agId)
donor.cols <- paste0("Donor",1:11)
test <- separate(df, donor,
into = donor.cols,
sep = ",",
extra = 'drop')
head(test)
tail(test)
test %>%
gather(key, donor,-country,-budget, - agId, na.rm = TRUE)
x <- test %>%
gather(key, donor,-country,-budget, - agId, na.rm = TRUE)
x.arr <- arrange(x,agId)
head(x.arr)
tail(x.arr)
x.arr
grep(pattern = "\\%", x.arr$donor)
percent <- grep(pattern = "\\%", x.arr$donor)
percent <- grepl(pattern = "\\%", x.arr$donor)
percent
x.arr$Donorall[!percent] <- 1
x.arr
seperate(x.arr, donor,
into = "percent",
sep = ")",
extra = "drop")
separate(x.arr, donor,
into = "percent",
sep = ")",
extra = "drop")
separate(x.arr, donor,
into = "percent",
sep = "\\(",
extra = "drop")
df <- select(data, donor, country, budget,agId)
donor.cols <- paste0("Donor",1:11)
test <- separate(df, donor,
into = donor.cols,
sep = ",",
extra = 'drop')
x <- test %>%
gather(key, donor,-country,-budget, - agId, na.rm = TRUE)
x.arr <- arrange(x,agId)
separate(x.arr, donor,
into = "percent",
sep = "\\(",
extra = "drop")
separate(x.arr, donor,
into = c("donor","percent"),
sep = "\\(",
extra = "drop")
x.arr <- separate(x.arr, donor,
into = c("donor","percent"),
sep = "\\(",
extra = "drop")
x.arr$percent <- gsub("\\%","",x.arr$percent)
x.arr$percent
x.arr$percent <- gsub("\\)","",x.arr$percent)
x.arr$percent
x.arr$percent <- x.arr$percent/100
x.arr$percent[is.na(x.arr$percent)] <- 100
x.arr$percent <- x.arr$percent/100
x.arr$percent
x.arr$percent <- as.numeric(x.arr$percent)/100
x.arr$percent
colnames(x.arr)
x.arr
library(memisc)
library(dplyr)
library(reshape)
setwd("~/Dropbox/CROP/Jamaica/cropJam")
data.dir <- "~/Dropbox/CROP/Jamaica/data_listing"
#create data sets
source("R/createDataset.R")
master <- createDataset()
top <- grepl("no_other_Listing ",list.files(data.dir))
bot <- grepl("no_other_Roster ",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
#read first set pre-exported data files, NO OTHER
data.top <- as.data.set(spss.system.file(paste0(data.dir,"/",top)))
data.top <- as.data.frame(data.top, stringsAsFactors = FALSE)
names(data.top)[names(data.top) == "idnum"] <- "qId"
#read first set pre-exported data files, NO OTHER
data.top <- as.data.set(spss.system.file(paste0(data.dir,"/",top)))
data.top <- as.data.frame(data.top, stringsAsFactors = FALSE)
names(data.top)[names(data.top) == "idnum"] <- "qId"
data.bot <- as.data.set(spss.system.file(paste0(data.dir,"/",bot)))
data.bot <- as.data.frame(data.bot, stringsAsFactors = FALSE)
names(data.bot)[names(data.bot) == "idnum"] <- "qId"
names(data.bot)[names(data.bot) == "id"] <- "parcelId"
#create data files pathes
top <- grepl("no_other_Listing ",list.files(data.dir))
bot <- grepl("no_other_Roster ",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
#read first set pre-exported data files, NO OTHER
data.top <- as.data.set(spss.system.file(paste0(data.dir,"/",top)))
data.top <- as.data.frame(data.top, stringsAsFactors = FALSE)
names(data.top)[names(data.top) == "idnum"] <- "qId"
data.bot <- as.data.set(spss.system.file(paste0(data.dir,"/",bot)))
data.bot <- as.data.frame(data.bot, stringsAsFactors = FALSE)
names(data.bot)[names(data.bot) == "idnum"] <- "qId"
names(data.bot)[names(data.bot) == "id"] <- "parcelId"
#remove columns containing only NAs
cols <- sapply(data.top, function(x) length(x) == sum(is.na(x)))
data.top <- data.top[!cols]
master.no <- merge(data.top,
data.bot,
by = "qId",
all = TRUE)
##-------MERGE DATASETS WITH OTHER
#create data files pathes
top <- grepl("^Listing ",list.files(data.dir))
bot <- grepl("^parcel",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
#read datasets with OTHER column. Could not import
data.top <- read.table(paste0(data.dir,"/",top),
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE)
names(data.top)[names(data.top) == "Id"] <- "qId"
paste0(data.dir,"/",bot),
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE)
paste0(data.dir,"/",bot),
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE
paste0(data.dir,"/",bot)
#set wd
setwd("~/Dropbox/CROP/Jamaica/cropJam")
data.dir <- "~/Dropbox/CROP/Jamaica/data_listing"
#create data sets
source("R/createDataset.R")
master <- createDataset()
#create data files pathes
top <- grepl("no_other_Listing ",list.files(data.dir))
bot <- grepl("no_other_Roster ",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
#read first set pre-exported data files, NO OTHER
data.top <- as.data.set(spss.system.file(paste0(data.dir,"/",top)))
data.top <- as.data.frame(data.top, stringsAsFactors = FALSE)
names(data.top)[names(data.top) == "idnum"] <- "qId"
data.bot <- as.data.set(spss.system.file(paste0(data.dir,"/",bot)))
data.bot <- as.data.frame(data.bot, stringsAsFactors = FALSE)
names(data.bot)[names(data.bot) == "idnum"] <- "qId"
names(data.bot)[names(data.bot) == "id"] <- "parcelId"
#remove columns containing only NAs
cols <- sapply(data.top, function(x) length(x) == sum(is.na(x)))
data.top <- data.top[!cols]
master.no <- merge(data.top,
data.bot,
by = "qId",
all = TRUE)
head(master.no)
#create data files pathes
top <- grepl("^Listing ",list.files(data.dir))
bot <- grepl("^parcel",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
top
bot
#set wd
setwd("~/Dropbox/CROP/Jamaica/cropJam")
data.dir <- "~/Dropbox/CROP/Jamaica/data_listing"
#create data sets
source("R/createDataset.R")
master <- createDataset()
#set wd
setwd("~/Dropbox/CROP/Jamaica/cropJam")
data.dir <- "~/Dropbox/CROP/Jamaica/data_listing"
#create data sets
source("R/createDataset.R")
master <- createDataset()
setwd("~/Dropbox/CROP/Jamaica/cropJam")
data.dir <- "~/Dropbox/CROP/Jamaica/data_listing"
#create data files pathes
top <- grepl("no_other_Listing ",list.files(data.dir))
bot <- grepl("no_other_Roster ",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
#read first set pre-exported data files, NO OTHER
data.top <- as.data.set(spss.system.file(paste0(data.dir,"/",top)))
data.top <- as.data.frame(data.top, stringsAsFactors = FALSE)
names(data.top)[names(data.top) == "idnum"] <- "qId"
data.bot <- as.data.set(spss.system.file(paste0(data.dir,"/",bot)))
data.bot <- as.data.frame(data.bot, stringsAsFactors = FALSE)
names(data.bot)[names(data.bot) == "idnum"] <- "qId"
names(data.bot)[names(data.bot) == "id"] <- "parcelId"
#remove columns containing only NAs
cols <- sapply(data.top, function(x) length(x) == sum(is.na(x)))
data.top <- data.top[!cols]
master.no <- merge(data.top,
data.bot,
by = "qId",
all = TRUE)
top <- grepl("^Listing ",list.files(data.dir))
bot <- grepl("^parcel",list.files(data.dir))
top <- list.files(data.dir)[top]
bot <- list.files(data.dir)[bot]
top
bot
#read datasets with OTHER column. Could not import
data.top <- read.table(paste0(data.dir,"/",top),
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE)
names(data.top)[names(data.top) == "Id"] <- "qId"
data.bot <- read.table(paste0(data.dir,"/",bot),
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE)
names(data.bot)[names(data.bot) == "ParentId1"] <- "qId"
names(data.bot)[names(data.bot) == "Id"] <- "parcelId"
#remove columns of na
cols <- sapply(data.top, function(x) length(x) == sum(is.na(x)))
data.top <- data.top[!cols]
master.other <- merge(data.top,
data.bot,
by = "qId",
all = TRUE)
master.other <- arrange(master.other, qId)
##-----Merge dataframes to one master
master <- merge(master.other,
master.no,
all = TRUE)
nrow(master)
colnames(master)
master <- select(master, -c(sssys_irnd,
ssSys_IRnd,
parcel_list))
list <-  c(sssys_irnd,
ssSys_IRnd,
parcel_list)
"sssys_irnd" %in% colnames(master)
library(memisc)
library(dplyr)
library(reshape)
master <- select(master, -c(sssys_irnd,
ssSys_IRnd,
parcel_list))
library(memisc)
library(dplyr)
library(reshape)
setwd("~/Dropbox/CROP/Jamaica/cropJam")
data.dir <- "~/Dropbox/CROP/Jamaica/data_listing"
#create data sets
source("R/createDataset.R")
master <- createDataset()
head(master)
